{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"./","text":"Installation # Following installations were successful with: Ubuntu 20 / Python 3.8 / pip3 Community v0.10.0 Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate sudo apt update sudo apt install libcairo2-dev libpango1.0-dev ffmpeg sudo apt install python3-pip pip3 install manim Install TexLive sudo apt install texlive ManimGl Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate Run pip install manimgl Part 2 #","title":"Installation"},{"location":"./#installation","text":"Following installations were successful with: Ubuntu 20 / Python 3.8 / pip3 Community v0.10.0 Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate sudo apt update sudo apt install libcairo2-dev libpango1.0-dev ffmpeg sudo apt install python3-pip pip3 install manim Install TexLive sudo apt install texlive ManimGl Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate Run pip install manimgl","title":"Installation"},{"location":"./#part-2","text":"","title":"Part 2"},{"location":"Math/Basic%20Shapes/Arc/","text":"","title":"Arc"},{"location":"Math/Basic%20Shapes/Circle/","text":"Circle Parameters # As mentioned in Azarzadvillas Documentation : Circle inherits from Arc radius : float, optional, default: 1.0 ... Which is the distance from arc_center to the arc arc_center : numpy array of dimension 3, optional, default: ORIGIN ... Which is the point to which all points in the arc are equidistants Add a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Add a circle + stroke color + stroke width # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Add a circle + stroke color + fill color # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) circle . set_fill ( YELLOW , opacity = 0.5 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Draw a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( YELLOW_D , width = 3 ) self . play ( ShowCreation ( circle )) circle . set_fill ( YELLOW , opacity = 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ): Draw a circle in 3 seconds # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () # 3 represents the stroke width circle . set_stroke ( RED , 3 ) # 0.5 represents the opacity of the fill self . play ( ShowCreate ( circle ), run_time = 3 ) circle . set_fill ( RED_E , 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ): Fade a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () Community from manim import * class circle1 ( Scene ): Remove a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () self . remove ( circle ) Community from manim import * class circle1 ( Scene ):","title":"Circle"},{"location":"Math/Basic%20Shapes/Circle/#circle-parameters","text":"As mentioned in Azarzadvillas Documentation : Circle inherits from Arc radius : float, optional, default: 1.0 ... Which is the distance from arc_center to the arc arc_center : numpy array of dimension 3, optional, default: ORIGIN ... Which is the point to which all points in the arc are equidistants","title":"Circle Parameters"},{"location":"Math/Basic%20Shapes/Circle/#add-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle )","title":"Add a circle"},{"location":"Math/Basic%20Shapes/Circle/#add-a-circle--stroke-color--stroke-width","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle )","title":"Add a circle + stroke color + stroke width"},{"location":"Math/Basic%20Shapes/Circle/#add-a-circle--stroke-color--fill-color","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) circle . set_fill ( YELLOW , opacity = 0.5 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle )","title":"Add a circle + stroke color + fill color"},{"location":"Math/Basic%20Shapes/Circle/#draw-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( YELLOW_D , width = 3 ) self . play ( ShowCreation ( circle )) circle . set_fill ( YELLOW , opacity = 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Draw a circle"},{"location":"Math/Basic%20Shapes/Circle/#draw-a-circle-in-3-seconds","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () # 3 represents the stroke width circle . set_stroke ( RED , 3 ) # 0.5 represents the opacity of the fill self . play ( ShowCreate ( circle ), run_time = 3 ) circle . set_fill ( RED_E , 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Draw a circle in 3 seconds"},{"location":"Math/Basic%20Shapes/Circle/#fade-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Fade a circle"},{"location":"Math/Basic%20Shapes/Circle/#remove-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () self . remove ( circle ) Community from manim import * class circle1 ( Scene ):","title":"Remove a circle"},{"location":"Math/Basic%20Shapes/Dot/","text":"","title":"Dot"},{"location":"Math/Basic%20Shapes/Line/","text":"","title":"Line"},{"location":"Math/Basic%20Shapes/Square/","text":"","title":"Square"},{"location":"Math/Basic%20Shapes/Triangle/","text":"","title":"Triangle"},{"location":"Math/Rendering/export/","text":"Some useful flags include: Source -w to write the scene to a file -o to write the scene to a file and open the result -s to skip to the end and just show the final frame. -so will save the final frame to an image and show it -n to skip ahead to the n'th animation of a scene. -f to make the playback window fullscreen","title":"Exporting"}]}