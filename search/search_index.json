{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"./","text":"Installation # Following installations were successful with: Ubuntu 20 / Python 3.8 / pip3 Community v0.10.0 Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate sudo apt update sudo apt install libcairo2-dev libpango1.0-dev ffmpeg sudo apt install python3-pip pip3 install manim Install TexLive sudo apt install texlive ManimGl Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate Run pip install manimgl Part 2 #","title":"Installation"},{"location":"./#installation","text":"Following installations were successful with: Ubuntu 20 / Python 3.8 / pip3 Community v0.10.0 Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate sudo apt update sudo apt install libcairo2-dev libpango1.0-dev ffmpeg sudo apt install python3-pip pip3 install manim Install TexLive sudo apt install texlive ManimGl Source Install virtualenv Create a virtual environment in a folder named manim Run the virtualenv via source bin/activate Run pip install manimgl","title":"Installation"},{"location":"./#part-2","text":"","title":"Part 2"},{"location":"Math/Basic%20Shapes/Arc/","text":"Arc Parameters # Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Arc radius : Distance from arc_center to the arc float (ex: 3 ) Optional Default: 1.0 arc_center : Point to which all points in the arc are equidistant numpy array of dimension 3 (ex: (1,4,3) ) Optional Default: ORIGIN start_angle : The angle at which to start the arc float (in radians) (ex: math.radians(80) ) Optional Default: 0 angle : Total angle between the point in start angle and the last point in the arc, measured from the arc_center float (in radians) Optional Default: TAU/4 (equal to PI/2) Arc (angle one) # ManimGL from manimlib import * import numpy as np class ArcOne ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcOne ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 ) Arc (angle two) # ManimGL from manimlib import * import numpy as np class ArcTwo ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( RIGHT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcTwo ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( RIGHT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 ) Arc (angle three) # ManimGL from manimlib import * import numpy as np class ArcThree ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + RIGHT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcThree ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + RIGHT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 ) Arc (angle four) # ManimGL from manimlib import * import numpy as np class ArcFFlip ( Scene ): def construct ( self ): angle = math . radians ( 80 ) arc = Arc ( arc_center = ( - 1 , - 1 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + LEFT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcFour ( Scene ): def construct ( self ): angle = 1.39626 arc = Arc ( arc_center = ( - 1 , - 1 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + LEFT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 )","title":"Arc"},{"location":"Math/Basic%20Shapes/Arc/#arc-parameters","text":"Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Arc radius : Distance from arc_center to the arc float (ex: 3 ) Optional Default: 1.0 arc_center : Point to which all points in the arc are equidistant numpy array of dimension 3 (ex: (1,4,3) ) Optional Default: ORIGIN start_angle : The angle at which to start the arc float (in radians) (ex: math.radians(80) ) Optional Default: 0 angle : Total angle between the point in start angle and the last point in the arc, measured from the arc_center float (in radians) Optional Default: TAU/4 (equal to PI/2)","title":"Arc Parameters"},{"location":"Math/Basic%20Shapes/Arc/#arc-angle-one","text":"ManimGL from manimlib import * import numpy as np class ArcOne ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcOne ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 )","title":"Arc (angle one)"},{"location":"Math/Basic%20Shapes/Arc/#arc-angle-two","text":"ManimGL from manimlib import * import numpy as np class ArcTwo ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( RIGHT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcTwo ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( RIGHT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 )","title":"Arc (angle two)"},{"location":"Math/Basic%20Shapes/Arc/#arc-angle-three","text":"ManimGL from manimlib import * import numpy as np class ArcThree ( Scene ): def construct ( self ): angle = math . radians ( - 80 ) arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + RIGHT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcThree ( Scene ): def construct ( self ): angle = - 1.39626 arc = Arc ( arc_center = ( - 2 , 1.5 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + RIGHT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 )","title":"Arc (angle three)"},{"location":"Math/Basic%20Shapes/Arc/#arc-angle-four","text":"ManimGL from manimlib import * import numpy as np class ArcFFlip ( Scene ): def construct ( self ): angle = math . radians ( 80 ) arc = Arc ( arc_center = ( - 1 , - 1 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + LEFT ) self . play ( ShowCreation ( arc ), run_time = 3 ) self . wait () Community from manim import * import numpy as np class ArcFour ( Scene ): def construct ( self ): angle = 1.39626 arc = Arc ( arc_center = ( - 1 , - 1 , 0 ), radius = 2.5 , angle = angle , color = YELLOW ) arc . flip ( UP + LEFT ) self . play ( Create ( arc ), run_time = 3 ) self . wait ( 2 )","title":"Arc (angle four)"},{"location":"Math/Basic%20Shapes/Axes/","text":"Axes Parameters # Paremeters - as mentioned in 3b1b Manim Documentation - are: Constructor : Axes Parameters : (x-min, x-max) (y-min, y-max) Labeled Axes # ManimGL from manimlib import * class AxesWithLabel ( Scene ): def construct ( self ): axeswithlabel = Axes (( - 1 , 10 ), ( - 1 , 8 )) axeswithlabel . add_coordinate_labels () self . play ( Write ( axeswithlabel , lag_ratio = 0.01 , run_time = 5 )) Community from manim import * class AxesWithLabel ( Scene ): def construct ( self ): ax = Axes ( x_range = [ 0 , 10 ], y_range = [ 0 , 10 ], axis_config = { \"include_tip\" : True }) . add_coordinates () labels = ax . get_axis_labels ( x_label = \"x\" , y_label = \"y\" ) self . play ( Create ( ax )) self . play ( Write ( labels )) self . wait ( 2 ) Preview: # ManimGL Preview Community Preview Non-Labeled Axes # ManimGL from manimlib import * class AxesWithoutLabel ( Scene ): def construct ( self ): axeswithoutlabel = Axes (( - 1 , 10 ), ( - 1 , 8 )) self . play ( Write ( axeswithoutlabel , lag_ratio = 0.01 , run_time = 5 )) Community from manim import * class AxesWithoutLabel ( Scene ): def construct ( self ): ax = Axes ( x_range = [ 0 , 10 ], y_range = [ 0 , 10 ], axis_config = { \"include_tip\" : True }) labels = ax . get_axis_labels ( x_label = \"x\" , y_label = \"y\" ) self . play ( Create ( ax )) self . play ( Write ( labels )) self . wait ( 2 ) Preview: # ManimGL Preview Community Preview","title":"Axes"},{"location":"Math/Basic%20Shapes/Axes/#axes-parameters","text":"Paremeters - as mentioned in 3b1b Manim Documentation - are: Constructor : Axes Parameters : (x-min, x-max) (y-min, y-max)","title":"Axes Parameters"},{"location":"Math/Basic%20Shapes/Axes/#labeled-axes","text":"ManimGL from manimlib import * class AxesWithLabel ( Scene ): def construct ( self ): axeswithlabel = Axes (( - 1 , 10 ), ( - 1 , 8 )) axeswithlabel . add_coordinate_labels () self . play ( Write ( axeswithlabel , lag_ratio = 0.01 , run_time = 5 )) Community from manim import * class AxesWithLabel ( Scene ): def construct ( self ): ax = Axes ( x_range = [ 0 , 10 ], y_range = [ 0 , 10 ], axis_config = { \"include_tip\" : True }) . add_coordinates () labels = ax . get_axis_labels ( x_label = \"x\" , y_label = \"y\" ) self . play ( Create ( ax )) self . play ( Write ( labels )) self . wait ( 2 )","title":"Labeled Axes"},{"location":"Math/Basic%20Shapes/Axes/#preview","text":"ManimGL Preview Community Preview","title":"Preview:"},{"location":"Math/Basic%20Shapes/Axes/#non-labeled-axes","text":"ManimGL from manimlib import * class AxesWithoutLabel ( Scene ): def construct ( self ): axeswithoutlabel = Axes (( - 1 , 10 ), ( - 1 , 8 )) self . play ( Write ( axeswithoutlabel , lag_ratio = 0.01 , run_time = 5 )) Community from manim import * class AxesWithoutLabel ( Scene ): def construct ( self ): ax = Axes ( x_range = [ 0 , 10 ], y_range = [ 0 , 10 ], axis_config = { \"include_tip\" : True }) labels = ax . get_axis_labels ( x_label = \"x\" , y_label = \"y\" ) self . play ( Create ( ax )) self . play ( Write ( labels )) self . wait ( 2 )","title":"Non-Labeled Axes"},{"location":"Math/Basic%20Shapes/Axes/#preview_1","text":"ManimGL Preview Community Preview","title":"Preview:"},{"location":"Math/Basic%20Shapes/Circle/","text":"Circle Parameters # Paremeters - as mentioned in Azarzadvillas Documentation - are: Circle inherits from Arc Constructor : - Circle radius : Distance from arc_center to the arc float (ex: 2 ) Optional Default: 1.0 arc_center : Point to which all points in the arc are equidistant numpy array of dimension 3 (ex: (1,1,0) ) Optional Default: ORIGIN Add a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Set stroke color & stroke width # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Set stroke color & fill color # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) circle . set_fill ( YELLOW , opacity = 0.5 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Draw a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( YELLOW_D , width = 3 ) self . play ( ShowCreation ( circle )) circle . set_fill ( YELLOW , opacity = 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ): Draw a circle in 3 seconds # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () # 3 represents the stroke width circle . set_stroke ( RED , 3 ) # 0.5 represents the opacity of the fill self . play ( ShowCreate ( circle ), run_time = 3 ) circle . set_fill ( RED_E , 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ): Fade a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () Community from manim import * class circle1 ( Scene ): Remove a circle # ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () self . remove ( circle ) Community from manim import * class circle1 ( Scene ):","title":"Circle"},{"location":"Math/Basic%20Shapes/Circle/#circle-parameters","text":"Paremeters - as mentioned in Azarzadvillas Documentation - are: Circle inherits from Arc Constructor : - Circle radius : Distance from arc_center to the arc float (ex: 2 ) Optional Default: 1.0 arc_center : Point to which all points in the arc are equidistant numpy array of dimension 3 (ex: (1,1,0) ) Optional Default: ORIGIN","title":"Circle Parameters"},{"location":"Math/Basic%20Shapes/Circle/#add-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () self . add ( circle )","title":"Add a circle"},{"location":"Math/Basic%20Shapes/Circle/#set-stroke-color--stroke-width","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle )","title":"Set stroke color &amp; stroke width"},{"location":"Math/Basic%20Shapes/Circle/#set-stroke-color--fill-color","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) circle . set_fill ( YELLOW , opacity = 0.5 ) self . add ( circle ) Community from manim import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , width = 3 ) self . add ( circle )","title":"Set stroke color &amp; fill color"},{"location":"Math/Basic%20Shapes/Circle/#draw-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( YELLOW_D , width = 3 ) self . play ( ShowCreation ( circle )) circle . set_fill ( YELLOW , opacity = 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Draw a circle"},{"location":"Math/Basic%20Shapes/Circle/#draw-a-circle-in-3-seconds","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () # 3 represents the stroke width circle . set_stroke ( RED , 3 ) # 0.5 represents the opacity of the fill self . play ( ShowCreate ( circle ), run_time = 3 ) circle . set_fill ( RED_E , 0.5 ) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Draw a circle in 3 seconds"},{"location":"Math/Basic%20Shapes/Circle/#fade-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () Community from manim import * class circle1 ( Scene ):","title":"Fade a circle"},{"location":"Math/Basic%20Shapes/Circle/#remove-a-circle","text":"ManimGL from manimlib import * class circle1 ( Scene ): def construct ( self ): circle = Circle () circle . set_stroke ( RED , 3 ) self . play ( ShowCreate ( circle )) circle . set_fill ( YELLOW , 0.5 ) self . wait () # run_time = x can also be added to play(FadeIn()) self . play ( FadeIn ( circle )) self . wait () self . remove ( circle ) Community from manim import * class circle1 ( Scene ):","title":"Remove a circle"},{"location":"Math/Basic%20Shapes/Dot/","text":"Dot Parameters # Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Dot - SmallDot point : Center of the dot numpy array of dimension 3 (ex: (1,1,0) ) Optional Default: ORIGIN radius : Size of the dot float (ex: 0.2 ) Optional Default: DEFAULT_DOT_RADIUS Dot Creation # ManimGL from manimlib import * class DotOne ( Scene ): def construct ( self ): dot = Dot ( point = ( 2 , 1 , 0 ), radius = 0.1 , color = YELLOW ) self . play ( ShowCreation ( dot )) self . wait ( 2 ) Community from manim import * class DotOne ( Scene ): def construct ( self ): dot = Dot ( point = ( 2 , 1 , 0 ), radius = 0.1 , color = YELLOW ) self . play ( Create ( dot )) self . wait ( 2 ) Small Dot # ManimGL from manimlib import * class DotSmall ( Scene ): def construct ( self ): Sdot = SmallDot ( point = ( 2 , 1 , 0 ), color = YELLOW ) self . play ( ShowCreation ( Sdot )) self . wait ( 2 )","title":"Dot"},{"location":"Math/Basic%20Shapes/Dot/#dot-parameters","text":"Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Dot - SmallDot point : Center of the dot numpy array of dimension 3 (ex: (1,1,0) ) Optional Default: ORIGIN radius : Size of the dot float (ex: 0.2 ) Optional Default: DEFAULT_DOT_RADIUS","title":"Dot Parameters"},{"location":"Math/Basic%20Shapes/Dot/#dot-creation","text":"ManimGL from manimlib import * class DotOne ( Scene ): def construct ( self ): dot = Dot ( point = ( 2 , 1 , 0 ), radius = 0.1 , color = YELLOW ) self . play ( ShowCreation ( dot )) self . wait ( 2 ) Community from manim import * class DotOne ( Scene ): def construct ( self ): dot = Dot ( point = ( 2 , 1 , 0 ), radius = 0.1 , color = YELLOW ) self . play ( Create ( dot )) self . wait ( 2 )","title":"Dot Creation"},{"location":"Math/Basic%20Shapes/Dot/#small-dot","text":"ManimGL from manimlib import * class DotSmall ( Scene ): def construct ( self ): Sdot = SmallDot ( point = ( 2 , 1 , 0 ), color = YELLOW ) self . play ( ShowCreation ( Sdot )) self . wait ( 2 )","title":"Small Dot"},{"location":"Math/Basic%20Shapes/Grid/","text":"Grid Parameters # Paremeters - as mentioned in 3b1b Manim Documentation - are: Constructor : NumberPlane Parameters : (x-min, x-max) (y-min, y-max) Grid Creation # ManimGL from manimlib import * class GridExample ( Scene ): def construct ( self ): grid = NumberPlane (( - 10 , 10 ), ( - 5 , 5 )) self . play ( ShowCreation ( grid ), run_time = 3 ) self . wait ( 2 ) Community from manim import * import numpy as np class OpeningManimExample ( Scene ): def construct ( self ): grid = NumberPlane (( - 10 , 10 ), ( - 5 , 5 )) self . play ( Create ( grid ), run_time = 3 ) self . wait ( 2 )","title":"Grid"},{"location":"Math/Basic%20Shapes/Grid/#grid-parameters","text":"Paremeters - as mentioned in 3b1b Manim Documentation - are: Constructor : NumberPlane Parameters : (x-min, x-max) (y-min, y-max)","title":"Grid Parameters"},{"location":"Math/Basic%20Shapes/Grid/#grid-creation","text":"ManimGL from manimlib import * class GridExample ( Scene ): def construct ( self ): grid = NumberPlane (( - 10 , 10 ), ( - 5 , 5 )) self . play ( ShowCreation ( grid ), run_time = 3 ) self . wait ( 2 ) Community from manim import * import numpy as np class OpeningManimExample ( Scene ): def construct ( self ): grid = NumberPlane (( - 10 , 10 ), ( - 5 , 5 )) self . play ( Create ( grid ), run_time = 3 ) self . wait ( 2 )","title":"Grid Creation"},{"location":"Math/Basic%20Shapes/Line/","text":"Line Parameters # Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Line - DashedLine start : Start point of the line numpy array of dimension 3 (ex: (0,0,0) ) Optional Default: LEFT end : End point of the line numpy array of dimension 3 (ex: (1,3,0) ) Optional Default: RIGHT path_arc : If set to None, the line is a straight line. Otherwise, the line is a curved line between start and end with the angle specified float (in radians) (ex: math.radians(80) ) Optional Default: None Straight Line # ManimGL from manimlib import * class StraightLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), color = YELLOW ) self . play ( ShowCreation ( line )) self . wait ( 2 ) Community from manim import * class StraightLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), color = YELLOW ) self . play ( Create ( line )) self . wait ( 2 ) Curved Line # ManimGL from manimlib import * class CurvedLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 3 , 0 , 0 ), path_arc = math . radians ( - 80 ), color = YELLOW ) self . play ( ShowCreation ( line )) self . wait ( 2 ) Community from manim import * class CurvedLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 3 , 0 , 0 ), path_arc =- 1.39626 , color = YELLOW ) self . play ( Create ( line )) self . wait ( 2 ) Dashed Line # ManimGL from manimlib import * class LineDashed ( Scene ): def construct ( self ): Dline = DashedLine ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), dash_length = 0.2 , color = YELLOW ) self . play ( ShowCreation ( Dline )) self . wait ( 2 ) Community from manim import * class LineDashed ( Scene ): def construct ( self ): Dline = DashedLine ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), dash_length = 0.2 , color = YELLOW ) self . play ( Create ( Dline )) self . wait ( 2 )","title":"Line"},{"location":"Math/Basic%20Shapes/Line/#line-parameters","text":"Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Line - DashedLine start : Start point of the line numpy array of dimension 3 (ex: (0,0,0) ) Optional Default: LEFT end : End point of the line numpy array of dimension 3 (ex: (1,3,0) ) Optional Default: RIGHT path_arc : If set to None, the line is a straight line. Otherwise, the line is a curved line between start and end with the angle specified float (in radians) (ex: math.radians(80) ) Optional Default: None","title":"Line Parameters"},{"location":"Math/Basic%20Shapes/Line/#straight-line","text":"ManimGL from manimlib import * class StraightLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), color = YELLOW ) self . play ( ShowCreation ( line )) self . wait ( 2 ) Community from manim import * class StraightLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), color = YELLOW ) self . play ( Create ( line )) self . wait ( 2 )","title":"Straight Line"},{"location":"Math/Basic%20Shapes/Line/#curved-line","text":"ManimGL from manimlib import * class CurvedLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 3 , 0 , 0 ), path_arc = math . radians ( - 80 ), color = YELLOW ) self . play ( ShowCreation ( line )) self . wait ( 2 ) Community from manim import * class CurvedLine ( Scene ): def construct ( self ): line = Line ( start = ( 0 , 0 , 0 ), end = ( 3 , 0 , 0 ), path_arc =- 1.39626 , color = YELLOW ) self . play ( Create ( line )) self . wait ( 2 )","title":"Curved Line"},{"location":"Math/Basic%20Shapes/Line/#dashed-line","text":"ManimGL from manimlib import * class LineDashed ( Scene ): def construct ( self ): Dline = DashedLine ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), dash_length = 0.2 , color = YELLOW ) self . play ( ShowCreation ( Dline )) self . wait ( 2 ) Community from manim import * class LineDashed ( Scene ): def construct ( self ): Dline = DashedLine ( start = ( 0 , 0 , 0 ), end = ( 2 , 2 , 0 ), dash_length = 0.2 , color = YELLOW ) self . play ( Create ( Dline )) self . wait ( 2 )","title":"Dashed Line"},{"location":"Math/Basic%20Shapes/Polygon/","text":"Polygon Parameters # Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Polygon *vertices : All the vertices defining the polygon numpy array of dimension 3 (ex: (1,1,0) ) Polygon - Pentagon # ManimGL from manimlib import * import numpy as np class PentagonCreation ( Scene ): def construct ( self ): pentagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ),( 2.7 , 1.9 , 0 ), ( 1 , 3 , 0 ),( - 0.7 , 1.9 , 0 )] poly = Polygon ( * pentagon ) # Yellow stroke poly . set_stroke ( YELLOW ) self . play ( ShowCreation ( poly ), run_time = 3 ) self . wait () #GREEN fill poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class PentagonCreation ( Scene ): def construct ( self ): pentagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ),( 2.7 , 1.9 , 0 ), ( 1 , 3 , 0 ),( - 0.7 , 1.9 , 0 )] poly = Polygon ( * pentagon ) # Yellow stroke poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) self . wait () #GREEN fill poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Polygon - Hexagon # ManimGL from manimlib import * import numpy as np class HexagonCreation ( Scene ): def construct ( self ): Hexagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ), ( 3 , 1.8 , 0 ), ( 2 , 3.5 , 0 ), ( 0 , 3.5 , 0 ), ( - 1.1 , 1.8 , 0 )] poly = Polygon ( * Hexagon ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class HexagonCreation ( Scene ): def construct ( self ): Hexagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ), ( 3 , 1.8 , 0 ), ( 2 , 3.5 , 0 ), ( 0 , 3.5 , 0 ), ( - 1.1 , 1.8 , 0 )] poly = Polygon ( * Hexagon ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Polygon - Equilateral Triangle # ManimGL from manimlib import * import numpy as np class EquilateralTriangle ( Scene ): def construct ( self ): EqTri = [( 0 , 0 , 0 ),( 3 , 0 , 0 ),( 1.5 , 2.5 , 0 )] poly = Polygon ( * EqTri ) poly . set_stroke ( YELLOW ) self . play ( ShowCreation ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class EquilateralTriangle ( Scene ): def construct ( self ): EqTri = [( 0 , 0 , 0 ),( 3 , 0 , 0 ),( 1.5 , 2.5 , 0 )] poly = Polygon ( * EqTri ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Polygon - Rectangle # ManimGL from manimlib import * import numpy as np class RecangleCreation ( Scene ): def construct ( self ): rec = [( 0 , 0 , 0 ), ( 3 , 0 , 0 ), ( 3 , 2 , 0 ), ( 0 , 2 , 0 )] poly = Polygon ( * rec ) poly . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) return self Community from manim import * import numpy as np class RecangleCreation ( Scene ): def construct ( self ): rec = [( 0 , 0 , 0 ), ( 3 , 0 , 0 ), ( 3 , 2 , 0 ), ( 0 , 2 , 0 )] poly = Polygon ( * rec ) poly . set_stroke ( YELLOW ) self . wait () self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) return self","title":"Polygon"},{"location":"Math/Basic%20Shapes/Polygon/#polygon-parameters","text":"Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Polygon *vertices : All the vertices defining the polygon numpy array of dimension 3 (ex: (1,1,0) )","title":"Polygon Parameters"},{"location":"Math/Basic%20Shapes/Polygon/#polygon---pentagon","text":"ManimGL from manimlib import * import numpy as np class PentagonCreation ( Scene ): def construct ( self ): pentagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ),( 2.7 , 1.9 , 0 ), ( 1 , 3 , 0 ),( - 0.7 , 1.9 , 0 )] poly = Polygon ( * pentagon ) # Yellow stroke poly . set_stroke ( YELLOW ) self . play ( ShowCreation ( poly ), run_time = 3 ) self . wait () #GREEN fill poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class PentagonCreation ( Scene ): def construct ( self ): pentagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ),( 2.7 , 1.9 , 0 ), ( 1 , 3 , 0 ),( - 0.7 , 1.9 , 0 )] poly = Polygon ( * pentagon ) # Yellow stroke poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) self . wait () #GREEN fill poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self","title":"Polygon - Pentagon"},{"location":"Math/Basic%20Shapes/Polygon/#polygon---hexagon","text":"ManimGL from manimlib import * import numpy as np class HexagonCreation ( Scene ): def construct ( self ): Hexagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ), ( 3 , 1.8 , 0 ), ( 2 , 3.5 , 0 ), ( 0 , 3.5 , 0 ), ( - 1.1 , 1.8 , 0 )] poly = Polygon ( * Hexagon ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class HexagonCreation ( Scene ): def construct ( self ): Hexagon = [( 0 , 0 , 0 ), ( 2 , 0 , 0 ), ( 3 , 1.8 , 0 ), ( 2 , 3.5 , 0 ), ( 0 , 3.5 , 0 ), ( - 1.1 , 1.8 , 0 )] poly = Polygon ( * Hexagon ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self","title":"Polygon - Hexagon"},{"location":"Math/Basic%20Shapes/Polygon/#polygon---equilateral-triangle","text":"ManimGL from manimlib import * import numpy as np class EquilateralTriangle ( Scene ): def construct ( self ): EqTri = [( 0 , 0 , 0 ),( 3 , 0 , 0 ),( 1.5 , 2.5 , 0 )] poly = Polygon ( * EqTri ) poly . set_stroke ( YELLOW ) self . play ( ShowCreation ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self Community from manim import * import numpy as np class EquilateralTriangle ( Scene ): def construct ( self ): EqTri = [( 0 , 0 , 0 ),( 3 , 0 , 0 ),( 1.5 , 2.5 , 0 )] poly = Polygon ( * EqTri ) poly . set_stroke ( YELLOW ) self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait () return self","title":"Polygon - Equilateral Triangle"},{"location":"Math/Basic%20Shapes/Polygon/#polygon---rectangle","text":"ManimGL from manimlib import * import numpy as np class RecangleCreation ( Scene ): def construct ( self ): rec = [( 0 , 0 , 0 ), ( 3 , 0 , 0 ), ( 3 , 2 , 0 ), ( 0 , 2 , 0 )] poly = Polygon ( * rec ) poly . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) return self Community from manim import * import numpy as np class RecangleCreation ( Scene ): def construct ( self ): rec = [( 0 , 0 , 0 ), ( 3 , 0 , 0 ), ( 3 , 2 , 0 ), ( 0 , 2 , 0 )] poly = Polygon ( * rec ) poly . set_stroke ( YELLOW ) self . wait () self . play ( Create ( poly ), run_time = 3 ) poly . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) return self","title":"Polygon - Rectangle"},{"location":"Math/Basic%20Shapes/Square/","text":"Square Parameters # Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Dot side_length : float (ex: 3 ) Optional Default: 2.0 Square Creation # ManimGL from manimlib import * class SquareCreation ( Scene ): def construct ( self ): square = Square () self . play ( ShowCreation ( square ), run_time = 3 ) self . wait () Community from manim import * class SquareCreation ( Scene ): def construct ( self ): square = Square () self . play ( Create ( square ), run_time = 3 ) self . wait () Set Stroke & Fill # ManimGL from manimlib import * class SquareFill ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait () Community from manim import * class SquareFilled ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( Create ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait () Square Fade-In # ManimGL from manimlib import * class SquareFade ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) self . play ( FadeIn ( square ), run_time = 3 ) self . wait () Community from manim import * class SquareFilled ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( Create ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait () self . play ( FadeIn ( square ), run_time = 3 ) self . wait ()","title":"Square"},{"location":"Math/Basic%20Shapes/Square/#square-parameters","text":"Paremeters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Dot side_length : float (ex: 3 ) Optional Default: 2.0","title":"Square Parameters"},{"location":"Math/Basic%20Shapes/Square/#square-creation","text":"ManimGL from manimlib import * class SquareCreation ( Scene ): def construct ( self ): square = Square () self . play ( ShowCreation ( square ), run_time = 3 ) self . wait () Community from manim import * class SquareCreation ( Scene ): def construct ( self ): square = Square () self . play ( Create ( square ), run_time = 3 ) self . wait ()","title":"Square Creation"},{"location":"Math/Basic%20Shapes/Square/#set-stroke--fill","text":"ManimGL from manimlib import * class SquareFill ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait () Community from manim import * class SquareFilled ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( Create ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait ()","title":"Set Stroke &amp; Fill"},{"location":"Math/Basic%20Shapes/Square/#square-fade-in","text":"ManimGL from manimlib import * class SquareFade ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait ( 2 ) self . play ( FadeIn ( square ), run_time = 3 ) self . wait () Community from manim import * class SquareFilled ( Scene ): def construct ( self ): square = Square () square . set_stroke ( YELLOW ) self . wait () self . play ( Create ( square ), run_time = 3 ) square . set_fill ( GREEN , opacity = 1 ) self . wait () self . play ( FadeIn ( square ), run_time = 3 ) self . wait ()","title":"Square Fade-In"},{"location":"Math/Basic%20Shapes/Triangle/","text":"Right-Angled Triangle Parameters # Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Polygon RIGHT+UP RIGHT+DOWN LEFT+DOWN LEFT+UP Note: Use only 3 of the previous parameters. And manipulate/interchange between them to change orientation of the right angle triangle Triangle Creation # ManimGL from manimlib import * class RightTriangle ( Scene ): def construct ( self ): triangle = Polygon ( RIGHT + UP , RIGHT + DOWN , LEFT + DOWN ) triangle . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( triangle ), run_time = 3 ) triangle . set_fill ( GREEN , opacity = 1 ) self . wait () Community from manim import * import numpy as np class RightTriangle ( Scene ): def construct ( self ): triangle = Polygon ( RIGHT + UP , RIGHT + DOWN , LEFT + DOWN ) triangle . set_stroke ( YELLOW ) self . wait () self . play ( Create ( triangle ), run_time = 3 ) triangle . set_fill ( GREEN , opacity = 1 ) self . wait ()","title":"Right-Angled Triangle"},{"location":"Math/Basic%20Shapes/Triangle/#right-angled-triangle-parameters","text":"Parameters - as mentioned in Azarzadvillas Documentation - are: Constructor : - Polygon RIGHT+UP RIGHT+DOWN LEFT+DOWN LEFT+UP Note: Use only 3 of the previous parameters. And manipulate/interchange between them to change orientation of the right angle triangle","title":"Right-Angled Triangle Parameters"},{"location":"Math/Basic%20Shapes/Triangle/#triangle-creation","text":"ManimGL from manimlib import * class RightTriangle ( Scene ): def construct ( self ): triangle = Polygon ( RIGHT + UP , RIGHT + DOWN , LEFT + DOWN ) triangle . set_stroke ( YELLOW ) self . wait () self . play ( ShowCreation ( triangle ), run_time = 3 ) triangle . set_fill ( GREEN , opacity = 1 ) self . wait () Community from manim import * import numpy as np class RightTriangle ( Scene ): def construct ( self ): triangle = Polygon ( RIGHT + UP , RIGHT + DOWN , LEFT + DOWN ) triangle . set_stroke ( YELLOW ) self . wait () self . play ( Create ( triangle ), run_time = 3 ) triangle . set_fill ( GREEN , opacity = 1 ) self . wait ()","title":"Triangle Creation"},{"location":"Math/Rendering/export/","text":"Some useful flags include: Source -w to write the scene to a file -o to write the scene to a file and open the result -s to skip to the end and just show the final frame. -so will save the final frame to an image and show it -n to skip ahead to the n'th animation of a scene. -f to make the playback window fullscreen","title":"Exporting"}]}